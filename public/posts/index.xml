<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Mateus Felipe</title><link>http://mateusfccp.me/posts/</link><description>Recent content in Posts on Mateus Felipe</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright><lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://mateusfccp.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Criando rapidamente um site pessoal com Hugo e Docker</title><link>http://mateusfccp.me/posts/docker-and-hugo/</link><pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate><guid>http://mateusfccp.me/posts/docker-and-hugo/</guid><description>Introdução Criar um site pessoal é uma tarefa trivial. Existem diversas opções no mercado, desde opções para leigos totais, como o Wix, ou plataformas mais robustas (e, neste caso, de qualidade questionável), como o Wordpress. No entanto, caso se queira maior flexibilidade e capacidade técnica, o mais comum é se recorrer a soluções mais técnicas. Ainda assim, parece ser um esforço demasiado e desnecessário gastar o seu tempo lidando com rotas, middlewares, requisições HTTP ou quaisquer outros aspectos técnicos que não se deseja ter que lidar apenas para um site pessoal, mesmo que você tenha o conhecimento necessário.</description><content type="html"><![CDATA[

<h2 id="introdução">Introdução</h2>

<p>Criar um site pessoal é uma tarefa trivial. Existem diversas opções no mercado, desde opções para leigos totais, como o <a href="https://pt.wix.com/">Wix</a>, ou plataformas mais robustas (e, neste caso, de qualidade questionável), como o <a href="https://wordpress.com/">Wordpress</a>. No entanto, caso se queira maior flexibilidade e capacidade técnica, o mais comum é se recorrer a soluções mais técnicas. Ainda assim, parece ser um esforço demasiado e desnecessário gastar o seu tempo lidando com rotas, middlewares, requisições HTTP ou quaisquer outros aspectos técnicos que não se deseja ter que lidar apenas para um site pessoal, mesmo que você tenha o conhecimento necessário.</p>

<p>Diante disso, algumas alternativas se apresentam como tecnologias que tentam proporcionar o melhor de ambas as abordagens, isto é, garantir um <em>deploy</em> rápido e um <em>workflow</em> simples sem comprometer a flexbilidade técnica. A fim de implementar <a href="mateusfccp.me">meu site pessoal</a>, optei por uma dessas tecnologias, a saber, o <a href="https://gohugo.io/">Hugo</a>.</p>

<blockquote>
<p>Hugo is a static HTML and CSS website generator written in Go. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.</p>

<p><em>— Readme do Hugo no Github <sup class="footnote-ref" id="fnref:1"><a href="#fn:1">1</a></sup></em></p>
</blockquote>

<p>De forma sucinta, o Hugo não é um servidor nem lida com aspectos relacionados a isso.<sup class="footnote-ref" id="fnref:2"><a href="#fn:2">2</a></sup> Ele meramente gera arquivos estáticos com base em uma estrutura de arquivos e um arquivo de configuração. Para um site pessoal simples, como esse em que você está lendo, não é necessário mais do que isso. E ao descartar um banco de dados e uma estrutura de servidor, reduzimos o <em>overhead</em> consideravelmente e, consequentemente, os custos de infraestrutura. Some isso ao <em>deploy</em> agilizado que o <a href="https://www.docker.com">Docker</a> oferece, e temos, rapidamente, uma página disponível na web.</p>

<p>Neste post, vou mostrar os passos que eu executei e, consequentemente, que você também pode exexecutar para subir fácil e rapidamente um site pesssoal na web com Hugo e Docker, tendo como estrutura o confiável serviço do <a href="https://aws.amazon.com/pt/ecs/">EC2 Container Service</a>.</p>

<h2 id="instalando-e-configurando-o-hugo">Instalando e Configurando o Hugo</h2>

<p>O primeiro passo é instalar e configurar o Hugo. Não vou entrar em detalhes da instalação, porque é um processo simples e bem documentado <a href="https://gohugo.io/getting-started/installing">na página do Hugo</a>. Após a instalação, a <a href="https://gohugo.io/commands/">CLI</a> do Hugo estará disponível para a criação de conteúdo.</p>

<p>Para criar um novo site, basta rodar <code>hugo new site &lt;nome&gt;</code>. Uma pasta com o nome que foi passado será criado, com a seguinte estrutura:</p>

<pre><code>.
├── archetypes
│   └── default.md
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
</code></pre>

<p>Como queremos um <em>deploy</em> rápido, podemos ignorar as pastas <code>archetypes</code>, <code>data</code>, <code>layouts</code> e <code>static</code><sup class="footnote-ref" id="fnref:8"><a href="#fn:8">3</a></sup>. Elas podem ser deletadas, caso você queira; o Hugo simplesmente vai usar os <em>defaults</em>. A partir de agora, vamos nos preocupar em <a href="#instalando-um-tema">instalar um tema</a> e <a href="#configurando-o-site">configurar nosso site</a>.</p>

<p>Caso você queira fazer o controle de versão do seu site (o que eu recomendo), agora é um bom momento para fazer o <em>commit</em> inicial. Inicialize o repositório local com <code>git init</code>, adicione o <em>remote</em> do seu repositório e suba o esqueleto gerado pelo Hugo.</p>

<h3 id="instalando-um-tema">Instalando um Tema</h3>

<p>Você não precisa de um tema para fazer um site. No entanto, você vai querer um. E instalar um tema no Hugo é extremamente fácil. Simplesmente copie ele para a pasta <code>themes</code> e modifique o arquivo de configuração para usar o tema instalado! Além disso, o Hugo possui uma <a href="https://themes.gohugo.io/">galeria de temas</a> em seu site para ajudar você a escolher o que se encaixa melhor com o perfil de seu site!</p>

<p>Para o meu site, escolhi o tema <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng" title="hello-friend-ng">hello-friend-ng</a>. Para instalar o tema, <code>git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git</code>. Desta forma, o tema estará associado ao seu site no controle de versão, ao mesmo tempo que você poderá atualizá-lo facilmente quando necessário com um simples <code>git pull</code>.</p>


<aside class="aside note">
    <div class="aside-header"><span style="margin-right: .4rem">&gt;</span> <span class="title">Nota</span> <div class="cursor note"> </div></div>
    Apesar de haver vários temas na galeria, talvez nenhum deles se encaixe com o seu site. Diante dessa situação, você pode criar o seu próprio tema ou modificar um desses existentes. Apesar de escolher o tema citado acima, <a href="https://github.com/mateusfccp/mateusfccp.me-hugo" title="Meu Tema">acabei alterando ele para melhor se encaixar às minhas necessidades</a>. No entanto, o foco deste post é agilidade, então não faz parte do escopo mostrar como criar ou alterar temas no Hugo. Caso você se interesse por isso, o processo está bem explicado na <a href="https://gohugo.io/themes/creating/">documentação do Hugo</a>.
</aside>



<h3 id="configurando-o-site">Configurando o Site</h3>

<p>Após instalar o tema, podemos começar a configurar o site através do arquivo <code>config.toml</code>, na raíz do site.<sup class="footnote-ref" id="fnref:3"><a href="#fn:3">4</a></sup> <sup class="footnote-ref" id="fnref:4"><a href="#fn:4">5</a></sup> A documentação do Hugo contém uma descrição detalhada de cada parâmetro configurável, e é possível que o tema que você instalou possua parâmetros personalizado. Alguns parâmetros, no entanto, são comuns e costumam estar em todos os sites.</p>

<ul>
<li><code>baseurl</code>: <em>Hostname</em> da raíz do seu site. No meu caso, <code>http://mateusfccp.me</code>.</li>
<li><code>theme</code>: O nome do tema para ser compilado com seu site, conforme <a href="#instalando-um-tema">seção anterior</a>.</li>
<li><code>title</code>: Título do site.</li>
<li><code>description</code>: Descrição do seu site (usado nos <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta">metadados</a> do site).</li>
<li><code>author.name</code>: Autor do site (também usado nos metadados).</li>
<li><code>keywords</code>: Palavras-chave relacionadas com o seu site (também usado nos metadados).</li>
</ul>

<p>Lógicamente, este é apenas um subconjunto comum de dezenas de possibilidades de configuração, e, normalmente, o suficiente para começar. Você pode consultar <a href="https://gohugo.io/getting-started/configuration">a documentação do Hugo</a> ou do tema que você escolheu para mais possibilidades de configuração, como <a href="https://gohugo.io/content-management/menus/">menus</a>, <a href="https://gohugo.io/content-management/multilingual/">suporte a várias línguas</a>, <a href="https://gohugo.io/content-management/comments/">comentários</a> etc.</p>

<h2 id="produzindo-conteúdo">Produzindo Conteúdo</h2>

<p>O Hugo já está devivamente instalado e configurado. Antes de rodar o compilador ou o server, no entanto, vamos precisar de algum conteúdo.</p>

<h3 id="criando-uma-página">Criando uma Página</h3>

<p>O Hugo simplifica a criação de conteúdo através do comando <a href="https://gohugo.io/commands/hugo_new/"><code>hugo new</code></a>. Para criar o seu primeiro post, basta executar o comando: <code>hugo new posts/&lt;slug&gt;.md</code>.<sup class="footnote-ref" id="fnref:5"><a href="#fn:5">6</a></sup> O <em>slug</em> é um identificador alfanumérico para seu conteúdo e, por padrão, é usado na construçao da <em>url</em>. Por exemplo, este post que você está lendo tem como diretório <code>content/posts/docker-and-hugo.md</code>, portanto a url é <a href="http://mateusfccp.me/posts/docker-and-hugo/">http://mateusfccp.me/posts/docker-and-hugo/</a></p>

<p>O Hugo irá gerar um novo arquivo conforme o tipo de conteúdo especificado, que varia de tema para tema. No meu caso, o arquivo gerado tem o seguinte conteúdo:</p>

<pre><code class="language-yaml">---
title: &quot;Criando rapidamente um site pessoal com Hugo e Docker&quot;
date: 2019-04-29T10:56:41-03:00
draft: true
toc: false
images:
tags:
  - untagged
---
</code></pre>

<p>Este cabeçalho se chama <a href="https://gohugo.io/content-management/front-matter/"><em>front matter</em></a>, na terminologia do Hugo. O <em>front matter</em> é definido entre os delimitadores <code>---</code><sup class="footnote-ref" id="fnref:6"><a href="#fn:6">7</a></sup>, e vão prover para o Hugo os dados necessários para a compilação correta dos arquivos. Apesar da estrutura criada prover os principais dados, há muitos outros que podem ser insertos no cabeçalho. Uma lista complete pode ser encontrada na <a href="https://gohugo.io/content-management/front-matter/#front-matter-formats">documentação</a>.</p>

<p>Após o cabeçalho, vem o conteúdo propriamente dito. Conforme o nome do arquivo sugere, o conteúdo do Hugo é, por padrão, escrito em Markdown.<sup class="footnote-ref" id="fnref:7"><a href="#fn:7">8</a></sup> Não faz parte do escopo deste post ensinar Markdown, então, se você chegou até aqui e ainda não sabe o que é, sinta-se livre para pesquisar e escrever o seu conteúdo da forma como melhor lhe aprouver.</p>

<h3 id="compilando-e-servindo-o-conteúdo-com-a-cli">Compilando e Servindo o Conteúdo com a CLI</h3>

<p>O Hugo provê, na sua CLI, funcionalidade tanto para a compilação dos arquivos estáticos, quando para serví-los. O comando <code>hugo</code> irá compilar o seu site, mandando os arquivos estáticos para a pasta <code>/public</code>, onde estarão prontos para serem servidos.</p>

<pre><code>[mateusfccp@ArchPinto hugo]$ hugo
                   | EN | PT-BR  
+------------------+----+-------+
  Pages            | 11 |    11  
  Paginator pages  |  0 |     0  
  Non-page files   |  0 |     0  
  Static files     | 13 |    13  
  Processed images |  0 |     0  
  Aliases          |  1 |     0  
  Sitemaps         |  2 |     1  
  Cleaned          |  0 |     0  

Total in 71 ms
</code></pre>

<p>Na próxima seção vamos dar uma rápida olhada em como configurar um container Docker com <em>nginx</em> para servir os arquivos estáticos. No entanto, vale lembrar que, além do comando <code>hugo</code>, para compilar, há também o comando <code>hugo server</code>, que, como o nome sugere, em vez de compilar os arquivos para o diretório de <em>output</em>, roda um servidor para serví-los.<sup class="footnote-ref" id="fnref:9"><a href="#fn:9">9</a></sup> Este servidor pode ou não ser utilizado em produção, mas sua maior utilidade se dá no desenvolvimento.</p>

<p>Ao rodar o servidor do Hugo, você se livra do trabalho de configurar um servidor local apenas para servir os arquivos estáticos, o que já economiza um tempo razoável no desenvolvimento. Não apenas isso, o servidor também observa o diretório do seu site para alterações. Isto significa que toda vez que você alterar um arquivo e salvá-lo, o servidor irá recompilá-lo instantaneamente e atualizar a página no navegador. Esta função acelera consideravelmente o desenvolvimento e a publicação de conteúdo.</p>

<h2 id="servindo-o-site-com-docker">Servindo o Site com Docker</h2>

<p>Desenvolver um site rapidamente não tem muito sentido se você perder um bom tempo configurando uma infraestrutura para que ele possa rodar. Por conta disso, escolhi usar um contâiner Docker para fazer rapidamente o <em>deploy</em> do site.</p>

<p>Como a única coisa que precisamos é servir arquivos estáticos, o <em>nginx</em> é uma opção viável. A <a href="https://hub.docker.com/_/nginx">imagem oficial do nginx</a> é mais do que suficiente para servirmos o site, e não vamos alterar nem mesmo uma linha do arquivo de configuração do <em>nginx</em>. Desta forma, a única coisa que temos que fazer é escrever nosso <em>Dockerfile</em> de forma que ele baixe o Hugo e o instale para poder compilar o arquivo.</p>
<div class="footnotes">

<hr />

<ol>
<li id="fn:1"><a href="https://github.com/gohugoio/hugo/blob/master/README.md">https://github.com/gohugoio/hugo/blob/master/README.md</a>
 <a class="footnote-return" href="#fnref:1"><sup>[return]</sup></a></li>
<li id="fn:2">Apesar do Hugo não ser um servidor, o CLI do Hugo disponibiliza um comando para rodar um server localmente (<a href="https://gohugo.io/commands/hugo_server/"><code>hugo server</code></a>). Normalmente, este servidor é utilizado para um desenvolvimento mais rápido, já que o desenvolvedor não terá que se preocupar em servir os arquivos estáticos nem em recompilá-los a cada alteração.
 <a class="footnote-return" href="#fnref:2"><sup>[return]</sup></a></li>
<li id="fn:8">Uma explicação detalhada da estrutura de arquivos pode ser encontrada na <a href="https://gohugo.io/getting-started/directory-structure/">documentação</a>.
 <a class="footnote-return" href="#fnref:8"><sup>[return]</sup></a></li>
<li id="fn:3">O arquivo de configuração é gerado, por padrão, como TOML. No entanto, é possível configurar o seu site com YAML e Json, como apontado <a href="https://gohugo.io/getting-started/configuration/#configuration-file">na documentação</a>.
 <a class="footnote-return" href="#fnref:3"><sup>[return]</sup></a></li>
<li id="fn:4">Alternativamente, você pode passar um arquivo de configuração arbitrário através do argumento <code>--config</code> ao compilar ou servir o seu site.
 <a class="footnote-return" href="#fnref:4"><sup>[return]</sup></a></li>
<li id="fn:5">O Hugo lida com o <a href="https://gohugo.io/content-management/types/">tipo de conteúdo</a>, por padrão, com base no caminho do conteúdo, neste caso, <code>posts</code>. Outros tipos de conteúdo podem estar disponíveis dependendo da sua configuração e seu tema. Além disso, você pode especificar o tipo de conteúdo do arquivo no momento da criação com a flag <code>-k &lt;kind&gt;</code>.
 <a class="footnote-return" href="#fnref:5"><sup>[return]</sup></a></li>
<li id="fn:6">Caso o cabeçalho use <code>---</code> como delimitadores, a configuração deverá ser escrita em YAML. Também serão aceitos os delimitadores <code>+++</code> para TOML e <code>{ }</code> para JSON. <a href="https://gohugo.io/content-management/front-matter/#front-matter-formats"><sup>[fonte]</sup></a>
 <a class="footnote-return" href="#fnref:6"><sup>[return]</sup></a></li>
<li id="fn:7">Markdown é o formato padrão para o conteúdo do Hugo, mas outros formatos são suportados, como <code>.org</code> e <code>.html</code>. Para mais informações, consulte a <a href="https://gohugo.io/content-management/formats/">documentação</a>.
 <a class="footnote-return" href="#fnref:7"><sup>[return]</sup></a></li>
<li id="fn:9">Os arquivos, em vez de serem escritos no diretório de <em>output</em>, são armazenados na memória durante a execução do servidor, a não ser que ele não consiga fazer isso por qualquer motivo.
 <a class="footnote-return" href="#fnref:9"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content></item></channel></rss>